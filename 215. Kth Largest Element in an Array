class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        int left = 0, right = n - 1;
        while (true) {
            int pivotIdx = rand() % (right - left + 1) + left;
            pivotIdx = partition(nums, left, right, pivotIdx);
            if (pivotIdx == k - 1) {
                return nums[pivotIdx];
            } else if (pivotIdx > k - 1) {
                right = pivotIdx - 1;
            } else {
                left = pivotIdx + 1;
            }
        }
    }
    
private:
    int partition(vector<int>& nums, int left, int right, int pivotIdx) {
        int pivotVal = nums[pivotIdx];
        swap(nums[pivotIdx], nums[right]);
        int storeIdx = left;
        for (int i = left; i <= right; i++) {
            if (nums[i] > pivotVal) {
                swap(nums[i], nums[storeIdx]);
                storeIdx++;
            }
        }
        swap(nums[storeIdx], nums[right]);
        return storeIdx;
    }
};
